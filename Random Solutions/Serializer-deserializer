
//Serializer and Deserializer done for Person struct, which has 3 parameters : name,age,id.
//Serializer generate "serialized.txt" file from vector of Person classes.
//Deserializer generate vector from Person class - from serialized.txt file.

struct Person {
	std::string name;
	std::string age;
	std::string id;
};

void serialize(std::vector<Person> vec_person) {
	std::ofstream outfile("serialized.txt");
	for (int ix = 0; ix < vec_person.size(); ++ix) {
		outfile << "----" << std::endl;
		if (vec_person[ix].name != "") {
			outfile << "name : " << vec_person[ix].name << std::endl;
		}
		else {
			outfile << "name : " << "N.A." << std::endl;
		}
		if (vec_person[ix].age != "") {
			outfile << "age : " << vec_person[ix].age << std::endl;
		}
		else {
			outfile << "age : " << "N.A." << std::endl;
		}
		if (vec_person[ix].id != "") {
			outfile << "id : " << vec_person[ix].id << std::endl;
		}
		else {
			outfile << "id : " << "N.A." << std::endl;
		}
	}
	outfile.close();
}

std::vector<std::string> stringToVector(std::string line) {
	std::vector<std::string> vec;
	std::string delimiter = " ";
	size_t pos = 0;
	std::string token;
	while ((pos = line.find(delimiter)) != std::string::npos) {
		token = line.substr(0, pos);
		vec.push_back(token);
		line.erase(0, pos + delimiter.length());
	}
	vec.push_back(line);
	return vec;
}

void deserial(std::string line, std::vector<Person>& vec_person, int & index) {
	if (line == "----") {
		Person p1;
		vec_person.push_back(p1);
		++index;
		return;
	}
	std::vector<std::string> line_with_words = stringToVector(line);
	if (line_with_words[0] == "name") {
		if (line_with_words[2] == "N.A.") {
			return;
		}
		else {
			vec_person[index].name = line_with_words[2];
			return;
		}
	}
	if (line_with_words[0] == "age") {
		if (line_with_words[2] == "N.A.") {
			return;
		}
		else {
			vec_person[index].age = line_with_words[2];
			return;
		}
	}
	if (line_with_words[0] == "id") {
		if (line_with_words[2] == "N.A.") {
			return;
		}
		else {
			vec_person[index].id = line_with_words[2];
			return;
		}
	}

}

std::vector<Person> deserial(std::string file_name) {
	std::vector<Person> vec_person;
	std::string line;
	int index = -1;
	std::ifstream myFile(file_name);
	if (myFile.is_open())
	{
		while (std::getline(myFile, line))
		{
			deserial(line, vec_person, index);
		}
		return vec_person;
	}
	else {
		std::cout << "Unable to open file";
	}
}
