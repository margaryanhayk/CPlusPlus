//You are a product manager and currently leading a team to develop a new product. 
//Unfortunately, the latest version of your product fails the quality check. 
//Since each version is developed based on the previous version, all the versions after 
//a bad version are also bad.
//Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, 
//which causes all the following ones to be bad.
//You are given an API bool isBadVersion(version) which returns whether version is bad. 
//Implement a function to find the first bad version. You should minimize the number of
//calls to the API.

class Solution {
public:
    int firstBadVersion(int n) {
        return firstBadVersion(n, 1);
    }
    int firstBadVersion(double n, double start) {
        if (start == n) {
            return n;
        }
        if (!isBadVersion((n + start) / 2) && isBadVersion(((n + start) / 2) + 1)) {
            return ((n + start) / 2) + 1;
        }

        if (isBadVersion((n + start) / 2)) {
            return firstBadVersion((n + start) / 2, start);
        }
        else {
            return firstBadVersion(n, (n + start) / 2);
        }
    }

};
