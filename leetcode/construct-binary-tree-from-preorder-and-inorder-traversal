//Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree 
//and inorder is the inorder traversal of the same tree, construct and return the binary tree.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void pop_front(std::vector<int>& vec) {
        for (int i = 0; i + 1 < vec.size(); ++i) {
            vec[i] = vec[i + 1];
        }
        vec.pop_back();
    }
    TreeNode* buildTree(std::vector<int>& preorder, std::vector<int>& inorder) {
        TreeNode* root = new TreeNode;
        root->val = preorder[0];
        int root_index_in_inorder;
        for (int i = 0; i < inorder.size(); ++i) {
            if (root->val == inorder[i]) {
                root_index_in_inorder = i;
                break;
            }
        }
        std::vector<int> left;
        std::vector<int> right;
        for (int i = 0; i < root_index_in_inorder; ++i) {
            left.push_back(inorder[i]);
        }
        for (int i = root_index_in_inorder + 1; i < inorder.size(); ++i) {
            right.push_back(inorder[i]);
        }
        if (left.size()) {
            pop_front(preorder);
            root->left = buildTree(preorder, left);
        }
        else {
            root->left = nullptr;
        }
        if (right.size()) {
            pop_front(preorder);
            root->right = buildTree(preorder, right);
        }
        else {
            root->right = nullptr;
        }
        return root;
    }
};
