//Given an integer array arr. You have to sort the integers in the array in ascending order 
//by the number of 1's in their binary representation and in case of two or more integers 
//have the same number of 1's you have to sort them in ascending order.
//Return the sorted array.

class Solution {
public:
    int count_bits(int n) {
        int cnt = 0;
        while (n) {
            if (n & 1) {
                ++cnt;
            }
            n >>= 1;
        }
        return cnt;
    }
    std::vector<int> sortByBits(std::vector<int>& arr) {
        std::vector<int> vec;
        std::sort(arr.begin(),arr.end());
        for (int i = 0; i < arr.size(); ++i) {
            vec.push_back(count_bits(arr[i]));
        }
        bubbleSort(vec, arr);
        return arr;
    }
    void bubbleSort(std::vector<int> & arr, std::vector<int> & sec){
        int n = arr.size();
        int i, j;
        for (i = 0; i < n - 1; i++) {
            for (j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    std::swap(arr[j], arr[j + 1]);
                    std::swap(sec[j], sec[j + 1]);
                }
            }
        }
    }
};
