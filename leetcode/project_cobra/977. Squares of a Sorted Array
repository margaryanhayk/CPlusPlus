//Given an integer array nums sorted in non-decreasing order, return an array of the squares 
//of each number sorted in non-decreasing order.

class Solution {
public:
    std::vector<int> sortedSquares(std::vector<int>& nums) {
        int i = 0;
        for (; i < nums.size(); ++i) {
            if (nums[i] >= 0) {
                break;
            }
        }
        if (i > 0) {
            --i;
        }
        std::vector<int> left;
        std::vector<int> right;
        int l = i + 1;
        for (; i >= 0; --i) {
            left.push_back(nums[i] * nums[i]);
        }
        for (; l < nums.size(); ++l) {
            right.push_back(nums[l] * nums[l]);
        }
        if (!left.size()) {
            return right;
        }
        if (!right.size()) {
            return left;
        }
        std::vector<int> arr;
        for (int i = 0; i < left.size(); ++i) {
            arr.push_back(left[i]);
        }
        for (int i = 0; i < right.size(); ++i) {
            arr.push_back(right[i]);
        }
        int m = left.size();
        int n = right.size();
        i = 0;
        int j = 0;
        while (i < m && j < n) {
            if (left[i] < right[j]) {
                arr[i + j] = left[i];
                ++i;
            }
            else {
                arr[i + j] = right[j];
                ++j;
            }
        }
        while (j < n) {
            arr[i + j] = right[j];
            ++j;
        }
        while (i < m) {
            arr[i + j] = left[i];
            ++i;
        }
        return arr;

    }
};
