//A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store 
//and retrieve keys in a dataset of strings. There are various applications of this data structure, 
//such as autocomplete and spellchecker.

 const int characters_count = 26;
 const int ascii_delta = 97;
 class Trie {
 public:
     Trie* m_character[characters_count];
     bool m_is_leaf;
 public:
     Trie() {
         for (int ix = 0; ix < characters_count; ++ix) {
             this->m_character[ix] = nullptr;
         }
         this->m_is_leaf = false;
     }
     void insert(const std::string & word) {
         Trie* current = this;
         for (int ix = 0; ix < word.length(); ++ix) {
             if (!current->m_character[word[ix] - ascii_delta]) {
                 current->m_character[word[ix] - ascii_delta] = new Trie();
             }
             current = current->m_character[word[ix] - ascii_delta];
         }
         current->m_is_leaf = true;
     }

     bool search(const std::string & word) {
         Trie* traverse = this;
         for (int ix = 0; ix < word.length(); ++ix) {
             if (!traverse->m_character[word[ix] - ascii_delta]) {
                 return false;
             }
             traverse = traverse->m_character[word[ix] - ascii_delta];
         }
         return traverse->m_is_leaf;
     }

     bool startsWith(const std::string & prefix) {
         Trie* traverse = this;
         for (int ix = 0; ix < prefix.length(); ++ix) {
             if (traverse->m_character[prefix[ix] - ascii_delta] == nullptr) {
                 return false;
             }
             traverse = traverse->m_character[prefix[ix] - ascii_delta];
         }
         return true;
     }
 };
