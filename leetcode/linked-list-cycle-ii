//Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if(!head || !head->next){
            return nullptr;
        }
        ListNode * fast = head->next->next;
        ListNode * slow = head->next;
        while(fast && fast->next){
            if(fast == slow){
                break;
            }
            fast = fast->next->next;
            slow = slow->next;
        }
        if(fast != slow){
            return nullptr;
        }
        slow = head;
        while(slow != fast){
            slow=slow->next;
            fast=fast->next;
        }
        return slow;
    }
};
